name: YTAlertDiscord  # YouTube 새 영상 알림을 Discord로 전송

# 필요한 GitHub Secrets (레포지토리 Settings > Secrets and variables > Actions에서 설정):
# - CHANNEL_ID: YouTube 채널 ID (예: UCxxxxxxxxxxxxxxxxxxxxxx, YouTube 사용자 프로필 > 공유 > 채널 ID 복사로 값 확인 가능)
# - DISCORD_WEBHOOK_URL: Discord Webhook URL (Discord 서버 설정에서 생성)
# - HASH_SALT: 해시용 솔트 문자열 (랜덤 생성, 예: `openssl rand -hex 16` 실행)
# Secrets가 없으면 워크플로우가 실패하니 반드시 설정하세요!

on:
  schedule:
    - cron: "0 */2 * * *"  # 2시간마다 실행 (예: "*/15 * * * *"로 변경 시 15분마다 실행)
  workflow_dispatch:  # 수동 실행 가능 (GitHub Actions 탭에서 트리거)

permissions:
  contents: write  # state.json 푸시를 위한 쓰기 권한

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      MAX_EXTRACT: 5     # RSS에서 확인할 최대 영상 개수 (예: 10으로 늘리면 더 많은 영상 확인)
      MAX_STORED: 100    # state.json에 저장할 최대 해시 개수 (오래된 것부터 자동 삭제)

    steps:
      - name: 체크아웃 코드  # 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: RSS 피드 다운로드  # YouTube 채널의 RSS 피드 가져오기
        id: fetch
        run: |
          RSS_URL="https://www.youtube.com/feeds/videos.xml?channel_id=${{ secrets.CHANNEL_ID }}"
          
          echo "RSS 피드 다운로드 중..."
          if curl -s --fail "$RSS_URL" > feed.xml; then
            echo "RSS 피드 다운로드 성공"
          else
            echo "RSS 피드 다운로드 실패 (CHANNEL_ID가 올바른지 확인하세요)"
            exit 1
          fi

      - name: 최신 영상 정보 추출  # RSS에서 영상 ID, 제목, 업로드 날짜 추출
        id: extract
        run: |
          # 최근 MAX_EXTRACT 개 영상의 ID, 제목, 업로드 시간 추출
          grep -oPm${MAX_EXTRACT} "<yt:videoId>[^<]+" feed.xml | sed 's/<yt:videoId>//' > video_ids.txt
          grep -oPm${MAX_EXTRACT} "<title>[^<]+" feed.xml | sed 's/<title>//' > video_titles.txt
          grep -oPm${MAX_EXTRACT} "<published>[^<]+" feed.xml | sed 's/<published>//' > video_dates.txt
          
          echo "영상 정보 추출 완료"

      - name: 이전 업로드 상태 불러오기  # state.json에서 이전 영상 해시 목록 가져오기
        id: state
        run: |
          STATE_FILE=state.json
          if [ -f $STATE_FILE ]; then
            jq -r '.posted[]' $STATE_FILE > prev_hashes.txt 2>/dev/null || touch prev_hashes.txt
          else
            touch prev_hashes.txt
            echo '{"posted":[]}' > $STATE_FILE  # 파일 없으면 초기화
          fi
          echo "이전 해시 목록 로드 완료"

      - name: 새로운 영상 확인 및 알림 전송  # 새 영상 확인 후 Discord로 알림 보내기
        id: notify
        run: |
          # 해시 함수: 영상 ID + 솔트를 SHA-256으로 해시
          hash_id() {
            echo -n "$1${{ secrets.HASH_SALT }}" | sha256sum | cut -d ' ' -f1
          }
          
          # 새 해시 저장용 파일
          > new_hashes.txt
          > new_videos_info.txt
          
          # 각 영상 확인
          line_num=0
          while IFS= read -r video_id; do
            line_num=$((line_num + 1))
            
            # 해시 생성
            video_hash=$(hash_id "$video_id")
            
            # 기존 해시 목록에 있는지 확인
            if ! grep -Fxq "$video_hash" prev_hashes.txt; then
              echo "새 영상 발견: $video_id"
              echo "$video_hash" >> new_hashes.txt
              
              # 제목과 날짜 가져오기
              title=$(sed -n "${line_num}p" video_titles.txt)
              date=$(sed -n "${line_num}p" video_dates.txt)
              
              # 나중에 역순으로 보내기 위해 정보 저장
              echo "$video_id|$title|$date" >> new_videos_info.txt
            fi
          done < video_ids.txt
          
          # 새 영상이 있으면 역순으로 Discord 알림 전송 (오래된 것부터)
          if [ -s new_videos_info.txt ]; then
            echo "NEW_VIDEOS=true" >> $GITHUB_ENV
            
            # 역순으로 알림 전송
            tac new_videos_info.txt | while IFS='|' read -r video_id title date; do
              message="🎥 **새 영상 업로드!**\n제목: $title\n날짜: $date\n링크: https://youtu.be/$video_id"
              curl -H "Content-Type: application/json" \
                   -X POST \
                   -d "{\"content\": \"$message\"}" \
                   ${{ secrets.DISCORD_WEBHOOK_URL }}
              
              sleep 1  # Discord API 레이트 리밋 방지
            done
          else
            echo "NEW_VIDEOS=false" >> $GITHUB_ENV
            echo "새 영상 없음"
          fi

      - name: 상태 파일 업데이트  # state.json에 새 해시 저장 및 GitHub 푸시
        if: env.NEW_VIDEOS == 'true'
        run: |
          # 기존 해시와 새 해시 병합, 중복 제거
          cat prev_hashes.txt new_hashes.txt | sort -u > all_hashes.txt
          
          # MAX_STORED 개수만큼만 유지 (최근 것들)
          tail -n ${{ env.MAX_STORED }} all_hashes.txt > final_hashes.txt
          
          # JSON 형식으로 저장
          echo -n '{"posted":[' > state.json
          first=true
          while IFS= read -r hash; do
            if [ "$first" = true ]; then
              echo -n "\"$hash\"" >> state.json
              first=false
            else
              echo -n ",\"$hash\"" >> state.json
            fi
          done < final_hashes.txt
          echo ']}' >> state.json
          
          # Git 커밋 및 푸시
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add state.json
          git commit -m "새 영상 해시 업데이트" || echo "커밋할 변경사항 없음"
          git push
